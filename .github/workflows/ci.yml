name: Frontend CI + CodeRabbit Review (Daily @ 9AM IST)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main, dev]
  schedule:
    - cron: "30 3 * * *" # 9AM IST
  workflow_dispatch:
    inputs:
      tag:
        description: "Docker image tag (for manual push)"
        required: true

env:
  DOCKER_IMAGE: allcognix/media-studio

jobs:
  # -----------------------------------
  #  Daily Email Notification (9AM)
  # -----------------------------------
  notify:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Send Daily CI Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "AllCognix Frontend CI Report - ${{ github.repository }}"
          to: |
            anshul@allcognix.com,
            devops@allcognix.com,
            team@allcognix.com
          from: "AllCognix CI Bot <${{ secrets.EMAIL_USERNAME }}>"
          body: |
            Hello Team üëã,

            Here's your **Daily 9AM CI Summary** for **${{ github.repository }}**:

            üßπ Lint, Build, and Test checks running...
            ü§ñ CodeRabbit AI Review active on all PRs.
            üê≥ Docker push available manually if required.
            ‚è∞ Trigger Time: ${{ github.run_started_at }}

            ---
            Automated by AllCognix CI/CD Pipeline

  # -----------------------------------
  #  Code Review (CodeRabbit AI)
  # -----------------------------------
  code-review:
    name: üß† CodeRabbit AI Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: CodeRabbit Info
        run: |
          echo "üöÄ CodeRabbit will automatically review this Pull Request."
          echo "Ensure CodeRabbit App is installed ‚Üí https://github.com/marketplace/coderabbitai"

  # -----------------------------------
  #  Lint + Build + Test
  # -----------------------------------
  build-test:
    name: üîß Lint, Test & Build Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run Linter
        run: |
          if npm run | grep -q "^ *lint"; then
            echo "üßπ Running ESLint..."
            npm run lint -- --quiet || echo "‚ö†Ô∏è Lint warnings ignored."
          else
            echo "‚ö†Ô∏è No lint script found."
          fi

      - name: Run Tests
        run: |
          if npm run | grep -q "^ *test"; then
            echo "üß™ Running Tests..."
            npm test --if-present -- --ci --watchAll=false
          else
            echo "‚ö†Ô∏è No test script found."
          fi

      - name: Build Frontend
        run: |
          if npm run | grep -q "^ *build"; then
            echo "üèóÔ∏è Building frontend app..."
            npm run build
          else
            echo "‚ö†Ô∏è No build script found."
          fi

  # -----------------------------------
  #  Manual Docker Build & Push
  # -----------------------------------
  docker-push:
    name: üê≥ Docker Build & Push (Manual)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: [build-test]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker Image
        run: |
          TAG="${{ github.event.inputs.tag }}"
          echo "üê≥ Building image: $DOCKER_IMAGE:${TAG}"
          docker build -t $DOCKER_IMAGE:${TAG} .
          docker push $DOCKER_IMAGE:${TAG}
          echo "‚úÖ Image pushed: $DOCKER_IMAGE:${TAG}"
